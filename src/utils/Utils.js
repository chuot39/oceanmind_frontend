import { toast } from 'react-toastify';

export const isUserLoggedIn = () => localStorage.getItem('userData');

export const handleNoticeAction = ({ message, action, skin }) => {
    // const { skin } = useSkin();
    toast(`ü¶Ñ ${message} ${action}`, {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: skin,
    });
}

export const notifySuccess = (message) => {
    toast.dismiss();
    toast.success(message);
}

export const notifyError = (message) => {
    toast.dismiss();
    toast.error(message);
}

export const notifyWarning = (message) => {
    toast.warning(message);
}

export const handleScrollToTop = () => {

    const topElement = document.getElementById('top-of-page');

    if (topElement) {
        topElement.scrollIntoView({ behavior: 'smooth' });
    } else {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }
};

export const customStyles = {
    // Container - B·ªçc to√†n b·ªô component
    container: (provided) => ({
        ...provided,
        width: '100%' // Chi·ªÅu r·ªông 100% ƒë·ªÉ ph√π h·ª£p v·ªõi Form.Item
    }),

    // Control - Ph·∫ßn input ch√≠nh (border, background)
    control: (provided, state) => ({
        ...provided,
        minHeight: '32px', // Chi·ªÅu cao t·ªëi thi·ªÉu gi·ªëng Ant Design
        height: '32px', // Chi·ªÅu cao c·ªë ƒë·ªãnh gi·ªëng Ant Design
        boxShadow: 'none', // Kh√¥ng c√≥ shadow khi focus
        borderRadius: '2px', // Bo g√≥c nh·∫π gi·ªëng Ant Design
        borderColor: state.isFocused ? 'var(--primary-color, #40a9ff)' : 'var(--border-color-base, #d9d9d9)', // M√†u vi·ªÅn: xanh khi focus, x√°m khi b√¨nh th∆∞·ªùng
        '&:hover': {
            borderColor: 'var(--text-primary-color)' // M√†u vi·ªÅn xanh khi hover
        }
    }),

    // ValueContainer - Ch·ª©a gi√° tr·ªã ƒë√£ ch·ªçn v√† input
    valueContainer: (provided) => ({
        ...provided,
        height: '32px', // Chi·ªÅu cao gi·ªëng control
        padding: '0 11px' // Padding gi·ªëng Ant Design
    }),

    // Input - Ph·∫ßn nh·∫≠p text
    input: (provided) => ({
        ...provided,
        margin: '0', // Kh√¥ng c√≥ margin
        padding: '0' // Kh√¥ng c√≥ padding
    }),

    // IndicatorsContainer - Ch·ª©a c√°c indicators (clear, dropdown)
    indicatorsContainer: (provided) => ({
        ...provided,
        height: '32px' // Chi·ªÅu cao gi·ªëng control
    }),

    // DropdownIndicator - M≈©i t√™n dropdown
    dropdownIndicator: (provided, state) => ({
        ...provided,
        padding: '0 8px', // Padding gi·ªëng Ant Design
        color: state.isFocused ? 'var(--text-primary-color)' : '#bfbfbf', // M√†u xanh khi focus, x√°m khi b√¨nh th∆∞·ªùng
        '&:hover': {
            color: 'var(--color-active)' // M√†u xanh khi hover
        }
    }),

    // ClearIndicator - N√∫t x√≥a gi√° tr·ªã
    clearIndicator: (provided) => ({
        ...provided,
        padding: '0 8px', // Padding gi·ªëng Ant Design
        color: 'var(--text-primary-color)', // M√†u x√°m cho icon
        '&:hover': {
            color: 'var(--color-active)' // M√†u xanh khi hover
        }
    }),

    // Menu - Dropdown menu container
    menu: (provided) => ({
        ...provided,
        borderRadius: '2px', // Bo g√≥c nh·∫π gi·ªëng Ant Design
        boxShadow: 'var(--box-shadow-base, 0 2px 8px rgba(0, 0, 0, 0.15))', // Shadow gi·ªëng Ant Design dropdown
        zIndex: 1050 // z-index cao h∆°n ƒë·ªÉ kh√¥ng b·ªã che b·ªüi c√°c ph·∫ßn t·ª≠ kh√°c
    }),

    // MenuList - Danh s√°ch c√°c options trong dropdown
    menuList: (provided) => ({
        ...provided,
        padding: '4px 4px !important', // Padding top/bottom gi·ªëng Ant Design
        '&::-webkit-scrollbar': {
            width: '6px',
            height: '6px'
        },
        '&::-webkit-scrollbar-track': {
            background: 'var(--background-primary-color)',
        },
        '&::-webkit-scrollbar-thumb': {
            background: 'var(--color-divider)',
            borderRadius: '3px',
        },
        '&::-webkit-scrollbar-thumb:hover': {
            background: 'var(--secondary-color)'
        }
    }),

    // Option - T·ª´ng option trong dropdown
    option: (provided, state) => ({
        ...provided,
        padding: '5px 12px', // Padding gi·ªëng Ant Design
        color: 'var(--text-primary-color)',
        borderRadius: '4px',
        // margin: '0px 10px',
        backgroundColor: state.isSelected
            ? ' var(--bg-dropdown-selected-item)' // M√†u n·ªÅn xanh nh·∫°t khi ƒë∆∞·ª£c ch·ªçn
            : state.isFocused
                ? 'var(--bg-list-notice-hover)' // M√†u n·ªÅn x√°m nh·∫°t khi hover
                : null, // Kh√¥ng c√≥ m√†u n·ªÅn khi b√¨nh th∆∞·ªùng
        // color: state.isSelected ? 'var(--primary-color, #1890ff)' : 'var(--text-color, #000000d9)', // M√†u ch·ªØ xanh khi ch·ªçn, ƒëen khi b√¨nh th∆∞·ªùng
        fontWeight: state.isSelected ? 600 : 400, // ƒê·∫≠m h∆°n khi ƒë∆∞·ª£c ch·ªçn
        '&:active': {
            backgroundColor: 'var(--bg-dropdown-selected-item)', // M√†u n·ªÅn xanh nh·∫°t khi click
            color: 'var(--text-primary-color)'
        }
    }),

    // Placeholder - Text hi·ªÉn th·ªã khi ch∆∞a ch·ªçn gi√° tr·ªã
    placeholder: (provided) => ({
        ...provided,
        color: 'var(--secondary-color)' // M√†u x√°m nh·∫°t gi·ªëng Ant Design placeholder
    }),

    // SingleValue - Gi√° tr·ªã ƒë√£ ch·ªçn (ch·∫ø ƒë·ªô single select)
    singleValue: (provided) => ({
        ...provided,
        marginLeft: '0', // Kh√¥ng c√≥ margin left
        marginRight: '0', // Kh√¥ng c√≥ margin right
        color: 'var(--text-primary-color)' // M√†u ch·ªØ ƒëen v·ªõi opacity gi·ªëng Ant Design
    }),

    // MultiValue - Container cho m·ªói tag (ch·∫ø ƒë·ªô multi select)
    multiValue: (provided) => ({
        ...provided,
        backgroundColor: 'var(--color-cyan-300-text, #f5f5f5)', // M√†u n·ªÅn x√°m nh·∫°t cho tag
        borderRadius: '2px' // Bo g√≥c nh·∫π gi·ªëng Ant Design tag
    }),

    // MultiValueLabel - Text trong tag
    multiValueLabel: (provided) => ({
        ...provided,
        // color: 'var(--text-color, #000000d9)', // M√†u ch·ªØ ƒëen v·ªõi opacity
        padding: '0 4px' // Padding gi·ªëng Ant Design tag
    }),

    // MultiValueRemove - N√∫t x√≥a tag
    multiValueRemove: (provided) => ({
        ...provided,
        color: 'var(--text-color-secondary, #00000073)', // M√†u x√°m ƒë·∫≠m cho icon x√≥a
        '&:hover': {
            backgroundColor: 'var(--color-cyan-100-text, #e6f7ff)', // M√†u n·ªÅn xanh nh·∫°t khi hover
            color: 'var(--color-active)' // M√†u ch·ªØ xanh khi hover
        }
    })
};