import { SOCKET_URL } from "@/constants"
import { io } from "socket.io-client"
import { toast } from 'react-toastify';
import { NOTIFICATION_EVENT } from '@/views/user/stores/actions/friendActions';

// Kh·ªüi t·∫°o socket v√† bi·∫øn l∆∞u tr·ªØ
let socket;
const notificationCallbacks = [];
const typingTimeout = {};

/**
 * Kh·ªüi t·∫°o k·∫øt n·ªëi socket v√† thi·∫øt l·∫≠p c√°c listeners
 * @returns {Socket} Instance socket ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
 */
const initSocket = () => {
    // ƒê√≥ng k·∫øt n·ªëi c≈© n·∫øu c√≥
    if (socket && socket.connected) {
        socket.disconnect();
    }

    // T·∫°o k·∫øt n·ªëi m·ªõi
    socket = io(SOCKET_URL, {
        reconnectionAttempts: 10,
        reconnectionDelay: 1000,
        timeout: 10000,
        transports: ['polling', 'websocket'],
        autoConnect: true,
        reconnection: true
    });

    // X·ª≠ l√Ω c√°c s·ª± ki·ªán c∆° b·∫£n
    setupBasicEvents();

    // X·ª≠ l√Ω c√°c s·ª± ki·ªán th√¥ng b√°o
    setupNotificationEvents();

    return socket;
};

/**
 * Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán c∆° b·∫£n cho socket
 */
const setupBasicEvents = () => {
    // S·ª± ki·ªán k·∫øt n·ªëi
    socket.on('connect', () => {
        console.log('üîå Socket connected with ID:', socket.id);
        rejoinRooms();
    });

    // S·ª± ki·ªán l·ªói k·∫øt n·ªëi
    socket.on('connect_error', (err) => {
        console.error('Socket connection error:', err.message);
        setTimeout(() => {
            if (!socket.connected) socket.connect();
        }, 5000);
    });

    // S·ª± ki·ªán ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', (reason) => {
        console.log('Socket disconnected:', reason);
        if (reason === 'io server disconnect' || reason === 'transport close') {
            setTimeout(() => socket.connect(), 1000);
        }
    });

    // Theo d√µi x√°c nh·∫≠n tham gia room
    socket.on('roomJoined', (data) => {
        console.log('Room joined:', data);
    });
};

/**
 * Tham gia l·∫°i c√°c room sau khi k·∫øt n·ªëi l·∫°i
 */
const rejoinRooms = () => {
    const userData = JSON.parse(localStorage.getItem('userData') || '{}');
    if (userData?.documentId) {
        joinNotificationRoom(userData.documentId);
    }
};

/**
 * Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán th√¥ng b√°o cho socket
 */
const setupNotificationEvents = () => {
    // L·∫Øng nghe s·ª± ki·ªán th√¥ng b√°o
    socket.on('notification', (payload) => handleNotification(payload));

    // L·∫Øng nghe s·ª± ki·ªán th√¥ng b√°o tr·ª±c ti·∫øp (d·ª± ph√≤ng)
    socket.on('directNotification', (payload) => handleNotification(payload));
};

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c t·ª´ server
 * @param {Object} payload D·ªØ li·ªáu th√¥ng b√°o
 */
const handleNotification = (payload) => {
    try {
        if (!payload) return;
        console.log('üîî Notification received:', payload);

        // Tr√≠ch xu·∫•t th√¥ng tin notification v√† recipientId
        const { notification, recipientId } = extractNotificationData(payload);
        if (!notification) return;

        // Ki·ªÉm tra v√† x·ª≠ l√Ω th√¥ng b√°o cho ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const userData = JSON.parse(localStorage.getItem('userData') || '{}');
        const currentUserId = userData?.documentId || '';

        if (shouldProcessNotification(currentUserId, recipientId)) {
            // Ph√°t s·ª± ki·ªán ƒë·ªÉ th√¥ng b√°o cho c√°c components
            dispatchNotificationEvents({
                notification,
                recipientId: recipientId || currentUserId,
                timestamp: new Date().toISOString()
            });

            // Hi·ªÉn th·ªã toast n·∫øu l√† th√¥ng b√°o k·∫øt b·∫°n
            displayToastIfNeeded(notification);

            // G·ªçi c√°c callbacks ƒë√£ ƒëƒÉng k√Ω
            notifyCallbacks(payload);
        }
    } catch (error) {
        console.error('Error processing notification:', error);
    }
};

/**
 * Tr√≠ch xu·∫•t d·ªØ li·ªáu th√¥ng b√°o t·ª´ payload
 * @param {Object} payload D·ªØ li·ªáu th√¥ng b√°o
 * @returns {Object} D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
 */
const extractNotificationData = (payload) => {
    let notification, recipientId;

    if (payload.notification) {
        notification = payload.notification;
        recipientId = payload.recipientId;
    } else if (payload.id || payload.documentId || payload.title) {
        notification = payload;
    } else {
        console.error('Invalid notification structure:', payload);
        return {};
    }

    return { notification, recipientId };
};

/**
 * Ki·ªÉm tra xem c√≥ n√™n x·ª≠ l√Ω th√¥ng b√°o cho ng∆∞·ªùi d√πng hi·ªán t·∫°i kh√¥ng
 * @param {string} currentUserId ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
 * @param {string} recipientId ID ng∆∞·ªùi nh·∫≠n th√¥ng b√°o
 * @returns {boolean} K·∫øt qu·∫£ ki·ªÉm tra
 */
const shouldProcessNotification = (currentUserId, recipientId) => {
    return !recipientId || String(currentUserId).trim() === String(recipientId).trim();
};

/**
 * Hi·ªÉn th·ªã toast th√¥ng b√°o n·∫øu l√† th√¥ng b√°o k·∫øt b·∫°n
 * @param {Object} notification Th√¥ng b√°o c·∫ßn hi·ªÉn th·ªã
 */
const displayToastIfNeeded = (notification) => {
    // Ki·ªÉm tra lo·∫°i th√¥ng b√°o (k·∫øt b·∫°n)
    const isFriendRequest =
        notification.title?.includes("Friend Request") ||
        notification.content?.includes("friend request") ||
        notification.status === 'pending' ||
        notification.status === 'accepted' ||
        notification.noticeType?.name_en === "Friend Request";

    if (isFriendRequest) {
        const title = notification.title || 'Th√¥ng b√°o m·ªõi';
        const content = notification.content || 'B·∫°n c√≥ th√¥ng b√°o m·ªõi';
        const notificationId = notification.id || notification.documentId;

        // Hi·ªÉn th·ªã toast v·ªõi ID c·ªë ƒë·ªãnh ƒë·ªÉ tr√°nh hi·ªÉn th·ªã tr√πng l·∫∑p
        toast.success(`${title}: ${content}`, {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            toastId: `notification-${notificationId}`,
            style: { zIndex: 9999 }
        });
    }
};

/**
 * G·ªçi c√°c callbacks ƒë√£ ƒëƒÉng k√Ω ƒë·ªÉ x·ª≠ l√Ω th√¥ng b√°o
 * @param {Object} payload D·ªØ li·ªáu th√¥ng b√°o
 */
const notifyCallbacks = (payload) => {
    notificationCallbacks.forEach(callback => {
        try {
            callback(payload);
        } catch (error) {
            console.error('Notification callback error:', error);
        }
    });
};

/**
 * Ph√°t s·ª± ki·ªán th√¥ng b√°o cho c√°c components
 * @param {Object} eventData D·ªØ li·ªáu s·ª± ki·ªán
 */
const dispatchNotificationEvents = (eventData) => {
    try {
        // T·∫°o chi ti·∫øt s·ª± ki·ªán
        const eventDetail = { detail: eventData };

        // Ph√°t s·ª± ki·ªán NOTIFICATION_EVENT
        window.dispatchEvent(new CustomEvent(NOTIFICATION_EVENT, eventDetail));
    } catch (err) {
        console.error('Event dispatch error:', err);
    }
};

/**
 * ƒê·∫£m b·∫£o socket ƒë√£ k·∫øt n·ªëi
 * @returns {boolean} Tr·∫°ng th√°i k·∫øt n·ªëi sau khi ki·ªÉm tra
 */
const ensureSocketConnected = () => {
    if (!socket || !socket.connected) {
        socket = initSocket();
        return false;
    }
    return true;
};

/**
 * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi socket
 * @returns {boolean} tr·∫°ng th√°i k·∫øt n·ªëi
 */
const isSocketConnected = () => {
    return socket && socket.connected;
};

/**
 * G·ª≠i tr·∫°ng th√°i typing ƒë·∫øn server
 * @param {string} conversationId ID c·ªßa cu·ªôc tr√≤ chuy·ªán
 * @param {string} userId ID c·ªßa ng∆∞·ªùi d√πng
 * @param {boolean} isTyping Tr·∫°ng th√°i typing
 */
const sendTypingStatus = (conversationId, userId, isTyping) => {
    if (!conversationId || !userId) return;

    if (!ensureSocketConnected()) {
        setTimeout(() => sendTypingStatus(conversationId, userId, isTyping), 1000);
        return;
    }

    socket.emit("typing", { conversationId, userId, isTyping });
};

/**
 * B·∫Øt ƒë·∫ßu tr·∫°ng th√°i typing
 * @param {string} conversationId ID c·ªßa cu·ªôc tr√≤ chuy·ªán
 * @param {string} userId ID c·ªßa ng∆∞·ªùi d√πng
 */
const startTyping = (conversationId, userId) => {
    if (!conversationId || !userId) return;

    // G·ª≠i s·ª± ki·ªán ƒëang typing
    sendTypingStatus(conversationId, userId, true);

    // Clear timeout hi·ªán t·∫°i n·∫øu c√≥
    if (typingTimeout[conversationId]) {
        clearTimeout(typingTimeout[conversationId]);
    }

    // T·ª± ƒë·ªông ng·ª´ng typing sau 3 gi√¢y
    typingTimeout[conversationId] = setTimeout(() => {
        sendTypingStatus(conversationId, userId, false);
        typingTimeout[conversationId] = null;
    }, 3000);
};

/**
 * D·ª´ng tr·∫°ng th√°i typing
 * @param {string} conversationId ID c·ªßa cu·ªôc tr√≤ chuy·ªán
 * @param {string} userId ID c·ªßa ng∆∞·ªùi d√πng
 */
const stopTyping = (conversationId, userId) => {
    if (!conversationId || !userId) return;

    if (typingTimeout[conversationId]) {
        clearTimeout(typingTimeout[conversationId]);
        typingTimeout[conversationId] = null;
    }

    sendTypingStatus(conversationId, userId, false);
};

/**
 * G·ª≠i th√¥ng b√°o qua socket
 * @param {string} recipientId ID ng∆∞·ªùi nh·∫≠n th√¥ng b√°o
 * @param {object} notification ƒê·ªëi t∆∞·ª£ng th√¥ng b√°o
 */
const sendNotification = (recipientId, notification) => {
    if (!recipientId || !notification) {
        console.error('Invalid parameters for sendNotification');
        return;
    }

    if (!ensureSocketConnected()) {
        setTimeout(() => sendNotification(recipientId, notification), 1000);
        return;
    }

    // Chu·∫©n h√≥a th√¥ng tin th√¥ng b√°o
    const notificationObj = {
        ...notification,
        noticeType: notification.noticeType || { name_en: "Friend Request" },
        title: notification.title?.trim() || "Friend Request",
        content: notification.content?.trim() || "You have a new friend request"
    };

    // G·ª≠i th√¥ng b√°o
    emitNotification(recipientId, notificationObj);

    // Ph√°t s·ª± ki·ªán window
    dispatchNotificationEvents({
        notification: notificationObj,
        recipientId,
        timestamp: new Date().toISOString()
    });
};

/**
 * Th·ª±c hi·ªán emit s·ª± ki·ªán notification qua socket
 * @param {string} recipientId ID ng∆∞·ªùi nh·∫≠n th√¥ng b√°o
 * @param {object} notification ƒê·ªëi t∆∞·ª£ng th√¥ng b√°o
 */
const emitNotification = (recipientId, notification) => {
    // Chu·∫©n h√≥a ID
    const notificationId = notification.id || notification.documentId || Date.now().toString();

    const data = {
        recipientId,
        notification: {
            ...notification,
            id: notificationId,
            documentId: notificationId
        }
    };

    socket.emit("notification", data);
};

/**
 * ƒêƒÉng k√Ω l·∫Øng nghe th√¥ng b√°o
 * @param {function} callback H√†m x·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o
 * @returns {function} H√†m ƒë·ªÉ h·ªßy ƒëƒÉng k√Ω
 */
const addNotificationListener = (callback) => {
    if (typeof callback !== 'function') {
        console.error('addNotificationListener requires a function callback');
        return;
    }

    notificationCallbacks.push(callback);
    return () => removeNotificationListener(callback);
};

/**
 * H·ªßy ƒëƒÉng k√Ω l·∫Øng nghe th√¥ng b√°o
 * @param {function} callback H√†m callback ƒë√£ ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥
 */
const removeNotificationListener = (callback) => {
    const index = notificationCallbacks.indexOf(callback);
    if (index !== -1) {
        notificationCallbacks.splice(index, 1);
    }
};

/**
 * Tham gia v√†o room ƒë·ªÉ nh·∫≠n th√¥ng b√°o
 * @param {string} userId ID c·ªßa ng∆∞·ªùi d√πng
 */
const joinNotificationRoom = (userId) => {
    if (!userId) return;

    if (!ensureSocketConnected()) {
        setTimeout(() => joinNotificationRoom(userId), 1000);
        return;
    }

    // Format chu·∫©n cho room name
    const roomName = `user:${userId}`;

    // Tham gia ph√≤ng
    socket.emit('joinRoom', { userId, roomName });
};

// Kh·ªüi t·∫°o socket
socket = initSocket();

// Export c√°c h√†m c·∫ßn thi·∫øt
export {
    startTyping,
    stopTyping,
    isSocketConnected,
    sendNotification,
    addNotificationListener,
    removeNotificationListener,
    joinNotificationRoom,
    socket,
    dispatchNotificationEvents
};

// Export default cho socket ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code hi·ªán t·∫°i
export default socket;
